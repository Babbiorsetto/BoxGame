{
	// Place your BoxGame workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"New function": {
		"prefix": "fun",
		"body": [
			"${5:doc}",
			"${1:void} ${2:function}($3)",
			"{",
			"\t${0:/*TODO*/}",
			"}"
		],
		"description": "Basic function template"
	},
	"Documentation comment": {
		"prefix": "doc",
		"body": [
			"/*",
			"* ${1:Does stuff}",
			"* TODO",
			"* @param ${2:name} ${3:A parameter}",
			"* @return ${0:A return}",
			"*/"
		],
		"description": "Function documentation comment"
	},
	"New munit test": {
		"prefix": "test",
		"body": [
			"MunitResult ${1:my_test}(const MunitParameter params[], void *data)",
			"{",
			"\t${0}",
			"}"
		],
		"description": "Munit test"
	},
	"Array of tests": {
		"prefix": "tarray",
		"body": [
			"MunitTest ${1:something}_tests[] =",
			"{",
			"\t{\"/${2:name}\", ${3:function}, ${4:setup}, ${5:teardown}, MUNIT_TEST_OPTION_NONE, ${6:parameters}}",
			"\t{NULL, NULL, NULL, NULL, MUNIT_TEST_OPTION_NONE, NULL}",
			"};${0}"
		],
		"description": "Array of munit tests"
	},
	"Munit test suite": {
		"prefix": "suite",
		"body": [
			"const MunitSuite ${1:something}_suite =",
			"{",
			"\t\"/${2:name}\",",
			"\t${3:testArray},",
			"\t${4:NULL}, /* suites */",
			"\t${5:1}, /* iterations */",
			"\tMUNIT_SUITE_OPTION_NONE",
			"};"
		]
	},
	"Include guard": {
		"prefix": "guard",
		"body": [
			"#ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
			"#define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
			"${0}",
			"#endif"
		]

	}
}
